using DrWatson
@quickactivate "Shoreline Survival"
push!(LOAD_PATH, srcdir())
using ShorelineSurvival
using LinearAlgebra
using MultiAssign
using PyPlot

pygui(true)

##

function plotcirc(Œ∏, œï, r; R=1, color="C0", linewidth=1.5, N=1000)
    x, y, z = sphcirc(Œ∏, œï, r, R, N=N)
    plot3D(x, y, z, color=color, linewidth=linewidth)
    nothing
end

function plotpoint(p::SphericalPoint; R=1, color="C3", size=5)
    x, y, z = sph2cart(p)
    plot3D(R*x, R*y, R*z, ".", color=color, markersize=size)
    nothing
end

function plotvec(v, w; R=1)
    plot3D(
        R*[v[1], w[1]],
        R*[v[2], w[2]],
        R*[v[3], w[3]]
    )
end

function plotvec(v; R=1)
    plot3D(
        R*[0.0, v[1]],
        R*[0.0, v[2]],
        R*[0.0, v[3]]
    )
end

function plotseg(s::SphericalSegment; R=1, N=1000, color="C3", linewidth=1.5)
    plotpoint(s.a, R=R, color=color)
    plotpoint(s.b, R=R, color=color)
    C = GreatCircle(s)
    t = LinRange(0.0, arclength(s), N)
    @multiassign x, y, z = zeros(N)
    for i ‚àà 1:N
        x[i], y[i], z[i] = C(t[i])
    end
    plot3D(R*x, R*y, R*z, color=color, linewidth=linewidth)
    nothing
end

function plotgreatcirc(s::SphericalSegment; R=1, N=1000, color="k", linewidth=0.75)
    C = GreatCircle(s)
    t = LinRange(0.0, 2œÄ, N)
    @multiassign x, y, z = zeros(N)
    for i ‚àà 1:N
        x[i], y[i], z[i] = C(t[i])
    end
    plot3D(R*x, R*y, R*z, color=color, linewidth=linewidth)
    nothing
end

function setlim(R)
    xlim(-1.05*R, 1.05*R)
    ylim(-1.05*R, 1.05*R)
    zlim(-1.05*R, 1.05*R)
    nothing
end

function makegrid(R=1.0, N::Int=6, L::Int=100)
    œï = LinRange(0, 2œÄ, L)
    for Œ∏ in LinRange(0, œÄ, N+2)[2:end-1]
        r = sin(Œ∏)
        x = r*sin.(œï)
        y = r*cos.(œï)
        z = fill(cos(Œ∏), L)
        plot3D(R*x, R*y, R*z, "k", linewidth=0.7, alpha=0.2)
    end
    Œ∏ = LinRange(0, œÄ, L √∑ 2)
    for œï in LinRange(0, 2œÄ, 2N)[1:end-1]
        x, y, z = sph2cart(Œ∏, fill(œï, L √∑ 2), 1.0)
        plot3D(R*x, R*y, R*z, "k", linewidth=0.7, alpha=0.2)
    end
    setlim(R)
    axis("off")
    nothing
end

##

#sphere radius
R = 10.0
#spherical circle representing crater
Œ∏, œï = sphrand()
r = rand()*R
#segment which might intersect
s = SphericalSegment(sphrand(), sphrand())



figure()
makegrid(R)
plotcirc(Œ∏, œï, r, R=R)
plotgreatcirc(s, R=R)
plotseg(s, R=R)

P0 = sph2cart(Œ∏, œï)
P1, P2 = sph2cart(s.a), sph2cart(s.b)
N = unit(P1 √ó P2)
ùìÅ = r/R
œà = asin(P0 ‚ãÖ N)
if abs(œà) <= ùìÅ
    println("intersection!")
    P2‚Ä≤ = unit(P2 - P1*(P1 ‚ãÖ P2))
    A = P0 ‚ãÖ P1
    B = P0 ‚ãÖ P2‚Ä≤
    C = cos(ùìÅ)
    t‚ÇÄ = atan(B,A)
    Œît = acos(cos(ùìÅ)/sqrt(A^2 + B^2))
    t‚ÇÅ = t‚ÇÄ + Œît
    t‚ÇÇ = t‚ÇÄ - Œît
    plotvec(cos(t‚ÇÅ)*P1 + sin(t‚ÇÅ)*P2‚Ä≤, R=R)
    plotvec(cos(t‚ÇÇ)*P1 + sin(t‚ÇÇ)*P2‚Ä≤, R=R)
else
    println("no intersection")
end

tight_layout()
